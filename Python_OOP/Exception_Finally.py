# Format of using: try - except:

try:
    #risky code: In this section our actual code logic will be added
    x = int("abc")                  # This will throw a ValueError exception
except ValueError as e:             
    # Here ValueError is a Class in the Exception Class
    # e will be the object of ValueError Class
    # As we are creating an object of a Class, it will call its __init__ method automatically
    print("Caught ValueError:", e) 
# Here we are calling the object e

# Output: Caught ValueError: invalid literal for int() with base 10: 'abc' 
    # 1. Caught ValueError is the string passed in the print statement
    # 2. invalid literal for int() with base 10: 'abc' - This message is printed as per the defined in the __init__ method of ValueError - Exception - BaseException 
    # (This string is generated by the Compiler/ OS)

# Definition of ValueError Class:
class ValueError(Exception):
    """Raised when a function receives an argument of the correct type but an inappropriate value."""
    def __init__(self, message=None):
        super().__init__(message)

# Here, Exception is the Parent Class of ValueError class:

# Definition of Exception Class:
class Exception(BaseException):
            def __init__(self, *args):
                super().__init__(*args)
# Here, BaseException is the Parent class of Exception class

# Definition of BaseException Class: In actual CPython implementation, BaseException is written in C, not Python, but this shows its essential behavior
class BaseException:
    def __init__(self, *args):
        self.args = args

    def __str__(self):
        if len(self.args) == 1:
            return str(self.args[0])
        return str(self.args)
    
    
    